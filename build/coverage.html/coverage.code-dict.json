{"/home/travis/build/npmtest/node-npmtest-gm/test.js":"/* istanbul instrument in package npmtest_gm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gm/lib.npmtest_gm.js":"/* istanbul instrument in package npmtest_gm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gm.__dirname + '/lib.npmtest_gm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/index.js":"\n/**\n * Module dependencies.\n */\n\nvar Stream = require('stream').Stream;\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nutil.inherits(gm, EventEmitter);\n\n/**\n * Constructor.\n *\n * @param {String|Number} path - path to img source or ReadableStream or width of img to create\n * @param {Number} [height] - optional filename of ReadableStream or height of img to create\n * @param {String} [color] - optional hex background color of created img\n */\n\nfunction gm (source, height, color) {\n  var width;\n\n  if (!(this instanceof gm)) {\n    return new gm(source, height, color);\n  }\n\n  EventEmitter.call(this);\n\n  this._options = {};\n  this.options(this.__proto__._options);\n\n  this.data = {};\n  this._in = [];\n  this._out = [];\n  this._outputFormat = null;\n  this._subCommand = 'convert';\n\n  if (source instanceof Stream) {\n    this.sourceStream = source;\n    source = height || 'unknown.jpg';\n  } else if (Buffer.isBuffer(source)) {\n    this.sourceBuffer = source;\n    source = height || 'unknown.jpg';\n  } else if (height) {\n    // new images\n    width = source;\n    source = \"\";\n\n    this.in(\"-size\", width + \"x\" + height);\n\n    if (color) {\n      this.in(\"xc:\"+ color);\n    }\n  }\n\n  if (typeof source === \"string\") {\n    // then source is a path\n\n    // parse out gif frame brackets from filename\n    // since stream doesn't use source path\n    // eg. \"filename.gif[0]\"\n    var frames = source.match(/(\\[.+\\])$/);\n    if (frames) {\n      this.sourceFrames = source.substr(frames.index, frames[0].length);\n      source = source.substr(0, frames.index);\n    }\n  }\n\n  this.source = source;\n\n  this.addSrcFormatter(function (src) {\n    // must be first source formatter\n\n    var inputFromStdin = this.sourceStream || this.sourceBuffer;\n    var ret = inputFromStdin ? '-' : this.source;\n\n    if (ret && this.sourceFrames) ret += this.sourceFrames;\n\n    src.length = 0;\n    src[0] = ret;\n  });\n}\n\n/**\n * Subclasses the gm constructor with custom options.\n *\n * @param {options} options\n * @return {gm} the subclasses gm constructor\n */\n\nvar parent = gm;\ngm.subClass = function subClass (options) {\n  function gm (source, height, color) {\n    if (!(this instanceof parent)) {\n      return new gm(source, height, color);\n    }\n\n    parent.call(this, source, height, color);\n  }\n\n  gm.prototype.__proto__ = parent.prototype;\n  gm.prototype._options = {};\n  gm.prototype.options(options);\n\n  return gm;\n}\n\n/**\n * Augment the prototype.\n */\n\nrequire(\"./lib/options\")(gm.prototype);\nrequire(\"./lib/getters\")(gm);\nrequire(\"./lib/args\")(gm.prototype);\nrequire(\"./lib/drawing\")(gm.prototype);\nrequire(\"./lib/convenience\")(gm.prototype);\nrequire(\"./lib/command\")(gm.prototype);\nrequire(\"./lib/compare\")(gm.prototype);\nrequire(\"./lib/composite\")(gm.prototype);\nrequire(\"./lib/montage\")(gm.prototype);\n\n/**\n * Expose.\n */\n\nmodule.exports = exports = gm;\nmodule.exports.utils = require('./lib/utils');\nmodule.exports.compare = require('./lib/compare')();\nmodule.exports.version = require('./package.json').version;\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/options.js":"\nmodule.exports = exports = function (proto) {\n  proto._options = {};\n\n  proto.options = function setOptions (options) {\n    var keys = Object.keys(options)\n      , i = keys.length\n      , key\n\n    while (i--) {\n      key = keys[i];\n      this._options[key] = options[key];\n    }\n\n    return this;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/getters.js":"/**\n * Extend proto.\n */\n\nmodule.exports = function (gm) {\n\n  var proto = gm.prototype;\n\n  /**\n   * `identify` states\n   */\n\n  const IDENTIFYING = 1;\n  const IDENTIFIED = 2;\n\n  /**\n   * Map getter functions to output names.\n   *\n   * - format: specifying the -format argument (see man gm)\n   * - verbose: use -verbose instead of -format (only if necessary b/c its slow)\n   * - helper: use the conversion helper\n   */\n\n  var map = {\n      'format': { key: 'format', format: '%m ', helper: 'Format' }\n    , 'depth':  { key: 'depth',  format: '%q' }\n    , 'filesize': { key: 'Filesize', format: '%b' }\n    , 'size':  { key: 'size', format: '%wx%h ', helper: 'Geometry' }\n    , 'color': { key: 'color', format: '%k',  helper: 'Colors' }\n    , 'orientation': { key: 'Orientation', format: '%[EXIF:Orientation]', helper: 'Orientation' }\n    , 'res':   { key: 'Resolution', verbose: true }\n  }\n\n  /**\n   * Getter functions\n   */\n\n  Object.keys(map).forEach(function (getter) {\n    proto[getter] = function (opts, callback) {\n      if (!callback) callback = opts, opts = {};\n      if (!callback) return this;\n\n      var val = map[getter]\n        , key = val.key\n        , self = this;\n\n      if (self.data[key]) {\n        callback.call(self, null, self.data[key]);\n        return self;\n      }\n\n      self.on(getter, callback);\n\n      self.bufferStream = !!opts.bufferStream;\n\n      if (val.verbose) {\n        self.identify(opts, function (err, stdout, stderr, cmd) {\n          if (err) {\n            self.emit(getter, err, self.data[key], stdout, stderr, cmd);\n          } else {\n            self.emit(getter, err, self.data[key]);\n          }\n        });\n        return self;\n      }\n\n      var args = makeArgs(self, val);\n      self._exec(args, function (err, stdout, stderr, cmd) {\n        if (err) {\n          self.emit(getter, err, self.data[key], stdout, stderr, cmd);\n          return;\n        }\n\n        var result = (stdout||'').trim();\n\n        if (val.helper in helper) {\n          helper[val.helper](self.data, result);\n        } else {\n          self.data[key] = result;\n        }\n\n        self.emit(getter, err, self.data[key]);\n      });\n\n      return self;\n    }\n  });\n\n  /**\n   * identify command\n   *\n   * Overwrites all internal data with the parsed output\n   * which is more accurate than the fast shortcut\n   * getters.\n   */\n\n  proto.identify = function identify (opts, callback) {\n    // identify with pattern\n    if (typeof(opts) === 'string') {\n      opts = {\n        format: opts\n      }\n    }\n    if (!callback) callback = opts, opts = {};\n    if (!callback) return this;\n    if (opts && opts.format) return identifyPattern.call(this, opts, callback);\n\n    var self = this;\n\n    if (IDENTIFIED === self._identifyState) {\n      callback.call(self, null, self.data);\n      return self;\n    }\n\n    self.on('identify', callback);\n\n    if (IDENTIFYING === self._identifyState) {\n      return self;\n    }\n\n    self._identifyState = IDENTIFYING;\n\n    self.bufferStream = !!opts.bufferStream;\n\n    var args = makeArgs(self, { verbose: true });\n\n    self._exec(args, function (err, stdout, stderr, cmd) {\n      if (err) {\n        self.emit('identify', err, self.data, stdout, stderr, cmd);\n        return;\n      }\n\n      err = parse(stdout, self);\n\n      if (err) {\n        self.emit('identify', err, self.data, stdout, stderr, cmd);\n        return;\n      }\n\n      self.data.path = self.source;\n\n      self.emit('identify', null, self.data);\n      self._identifyState = IDENTIFIED;\n    });\n\n    return self;\n  }\n\n\n  /**\n   * identify with pattern\n   *\n   * Execute `identify -format` with custom pattern\n   */\n\n  function identifyPattern (opts, callback) {\n    var self = this;\n\n    self.bufferStream = !!opts.bufferStream;\n\n    var args = makeArgs(self, opts);\n    self._exec(args, function (err, stdout, stderr, cmd) {\n      if (err) {\n        return callback.call(self, err, undefined, stdout, stderr, cmd);\n      }\n\n      callback.call(self, err, (stdout||'').trim());\n    });\n\n    return self;\n  }\n\n\n  /**\n   * Parses `identify` responses.\n   *\n   * @param {String} stdout\n   * @param {Gm} self\n   * @return {Error} [optionally]\n   */\n\n  function parse (stdout, self) {\n    // normalize\n    var parts = (stdout||\"\").trim().replace(/\\r\\n|\\r/g, \"\\n\").split(\"\\n\");\n\n    // skip the first line (its just the filename)\n    parts.shift();\n\n    try {\n      var len = parts.length\n        , rgx1 = /^( *)(.+?): (.*)$/ // key: val\n        , rgx2 = /^( *)(.+?):$/      // key: begin nested object\n        , out = { indent: {} }\n        , level = null\n        , lastkey\n        , i = 0\n        , res\n        , o\n\n      for (; i < len; ++i) {\n        res = rgx1.exec(parts[i]) || rgx2.exec(parts[i]);\n        if (!res) continue;\n\n        var indent = res[1].length\n          , key = res[2] ? res[2].trim() : '';\n\n        if ('Image' == key || 'Warning' == key) continue;\n\n        var val = res[3] ? res[3].trim() : null;\n\n        // first iteration?\n        if (null === level) {\n          level = indent;\n          o = out.root = out.indent[level] = self.data;\n        } else if (indent < level) {\n          // outdent\n          if (!(indent in out.indent)) {\n            continue;\n          }\n          o = out.indent[indent];\n        } else if (indent > level) {\n          // dropping into a nested object\n          out.indent[level] = o;\n          // weird format, key/val pair with nested children. discard the val\n          o = o[lastkey] = {};\n        }\n\n        level = indent;\n\n        if (val) {\n          // if previous key was exist and we got the same key\n          // cast it to an array.\n          if(o.hasOwnProperty(key)){\n            // cast it to an array and dont forget the previous value\n            if(!Array.isArray(o[key])){\n              var tmp = o[key];\n              o[key] = [tmp];\n            }\n\n            // set value\n            o[key].push(val);\n          } else {\n            o[key] = val;\n          }\n\n          if (key in helper) {\n            helper[key](o, val);\n          }\n        }\n\n        lastkey = key;\n      }\n\n    } catch (err) {\n      err.message = err.message + \"\\n\\n  Identify stdout:\\n  \" + stdout;\n      return err;\n    }\n  }\n\n  /**\n   * Create an argument array for the identify command.\n   *\n   * @param {gm} self\n   * @param {Object} val\n   * @return {Array}\n   */\n\n  function makeArgs (self, val) {\n    var args = [\n        'identify'\n      , '-ping'\n    ];\n\n    if (val.format) {\n      args.push('-format', val.format);\n    }\n\n    if (val.verbose) {\n      args.push('-verbose');\n    }\n\n    args = args.concat(self.src());\n    return args;\n  }\n\n  /**\n   * Map exif orientation codes to orientation names.\n   */\n\n  var orientations = {\n      '1': 'TopLeft'\n    , '2': 'TopRight'\n    , '3': 'BottomRight'\n    , '4': 'BottomLeft'\n    , '5': 'LeftTop'\n    , '6': 'RightTop'\n    , '7': 'RightBottom'\n    , '8': 'LeftBottom'\n  }\n\n  /**\n   * identify -verbose helpers\n   */\n\n  var helper = gm.identifyHelpers = {};\n\n  helper.Geometry = function Geometry (o, val) {\n    // We only want the size of the first frame.\n    // Each frame is separated by a space.\n    var split = val.split(\" \").shift().split(\"x\");\n    var width = parseInt(split[0], 10);\n    var height = parseInt(split[1], 10);\n    if (o.size && o.size.width && o.size.height) {\n      if (width > o.size.width) o.size.width = width;\n      if (height > o.size.height) o.size.height = height;\n    } else {\n      o.size = {\n        width:  width,\n        height: height\n      }\n    }\n  };\n\n  helper.Format = function Format (o, val) {\n    o.format = val.split(\" \")[0];\n  };\n\n  helper.Depth = function Depth (o, val) {\n    o.depth = parseInt(val, 10);\n  };\n\n  helper.Colors = function Colors (o, val) {\n    o.color = parseInt(val, 10);\n  };\n\n  helper.Orientation = function Orientation (o, val) {\n    if (val in orientations) {\n      o['Profile-EXIF'] || (o['Profile-EXIF'] = {});\n      o['Profile-EXIF'].Orientation = val;\n      o.Orientation = orientations[val];\n    } else {\n      o.Orientation = val || 'Unknown';\n    }\n  };\n}\n\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/args.js":"/**\n * Dependencies\n */\n\nvar argsToArray = require('./utils').argsToArray;\nvar isUtil = require('./utils').isUtil;\n/**\n * Extend proto\n */\n\nmodule.exports = function (proto) {\n  // change the specified frame.\n  // See #202.\n  proto.selectFrame = function (frame) {\n    if (typeof frame === 'number')\n      this.sourceFrames = '[' + frame + ']';\n    return this;\n  }\n\n  // define the sub-command to use, http://www.graphicsmagick.org/utilities.html\n  proto.command = proto.subCommand = function subCommand (name){\n    this._subCommand = name;\n    return this;\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-adjoin\n  proto.adjoin = function adjoin () {\n    return this.out(\"-adjoin\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-affine\n  proto.affine = function affine (matrix) {\n    return this.out(\"-affine\", matrix);\n  }\n\n  proto.alpha = function alpha (type) {\n    if (!this._options.imageMagick) return new Error('Method -alpha is not supported by GraphicsMagick');\n    return this.out('-alpha', type);\n  }\n\n  /**\n   * Appends images to the list of \"source\" images.\n   *\n   * We may also specify either top-to-bottom or left-to-right\n   * behavior of the appending by passing a boolean argument.\n   *\n   * Examples:\n   *\n   *    img = gm(src);\n   *\n   *    // +append means left-to-right\n   *    img.append(img1, img2)       gm convert src img1 img2 -append\n   *    img.append(img, true)        gm convert src img +append\n   *    img.append(img, false)       gm convert src img -append\n   *    img.append(img)              gm convert src img -append\n   *    img.append(img).append()     gm convert src img -append\n   *    img.append(img).append(true) gm convert src img +append\n   *    img.append(img).append(true) gm convert src img +append\n   *    img.append(img).background('#222) gm convert src img -background #222 +append\n   *    img.append([img1,img2...],true)\n\n   * @param {String} or {Array} [img]\n   * @param {Boolean} [ltr]\n   * @see http://www.graphicsmagick.org/GraphicsMagick.html#details-append\n   */\n\n  proto.append = function append (img, ltr) {\n    if (!this._append) {\n      this._append = [];\n      this.addSrcFormatter(function (src) {\n        this.out(this._append.ltr ? '+append' : '-append');\n        src.push.apply(src, this._append);\n      });\n    }\n\n    if (0 === arguments.length) {\n      this._append.ltr = false;\n      return this;\n    }\n\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      switch (isUtil(arg)) {\n        case 'Boolean':\n          this._append.ltr = arg;\n          break;\n        case 'String':\n          this._append.push(arg);\n          break;\n        case 'Array':\n          for(var j=0,len=arg.length;j<len;j++){\n            if(isUtil(arg[j]) == 'String'){\n              this._append.push(arg[j]);\n            }\n          }\n          break;\n      }\n    }\n\n    return this;\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-authenticate\n  proto.authenticate = function authenticate (string) {\n    return this.out(\"-authenticate\", string);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-average\n  proto.average = function average () {\n    return this.out(\"-average\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-backdrop\n  proto.backdrop = function backdrop () {\n    return this.out(\"-backdrop\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-black-threshold\n  proto.blackThreshold = function blackThreshold (red, green, blue, opacity) {\n    return this.out(\"-black-threshold\", argsToArray(red, green, blue, opacity).join(','));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-blue-primary\n  proto.bluePrimary = function bluePrimary (x, y) {\n    return this.out(\"-blue-primary\", argsToArray(x, y).join(','));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-border\n  proto.border = function border (width, height) {\n    return this.out(\"-border\", width+\"x\"+height);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-bordercolor\n  proto.borderColor = function borderColor (color) {\n    return this.out(\"-bordercolor\", color);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-box\n  proto.box = function box (color) {\n    return this.out(\"-box\", color);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-channel\n  proto.channel = function channel (type) {\n    return this.out(\"-channel\", type);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-chop\n  proto.chop = function chop (w, h, x, y) {\n    return this.in(\"-chop\", w+\"x\"+h + \"+\"+(x||0)+\"+\"+(y||0));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-clip\n  proto.clip = function clip () {\n    return this.out(\"-clip\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-coalesce\n  proto.coalesce = function coalesce () {\n    return this.out(\"-coalesce\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-colorize\n  proto.colorize = function colorize (r, g, b) {\n    return this.out(\"-colorize\", [r,g,b].join(\",\"));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-colormap\n  proto.colorMap = function colorMap (type) {\n    return this.out(\"-colormap\", type);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-compose\n  proto.compose = function compose (operator) {\n    return this.out(\"-compose\", operator);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-compress\n  proto.compress = function compress (type) {\n    return this.out(\"-compress\", type);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-kernel\n  proto.convolve = function convolve (kernel) {\n    return this.out(\"-convolve\", kernel);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-create-directories\n  proto.createDirectories = function createDirectories () {\n    return this.out(\"-create-directories\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-deconstruct\n  proto.deconstruct = function deconstruct () {\n    return this.out(\"-deconstruct\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-define\n  proto.define = function define (value) {\n    return this.out(\"-define\", value);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-delay\n  proto.delay = function delay (value) {\n    return this.out(\"-delay\", value);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-displace\n  proto.displace = function displace (horizontalScale, verticalScale) {\n    return this.out(\"-displace\", horizontalScale+'x'+verticalScale);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-display\n  proto.display = function display (value) {\n    return this.out(\"-display\", value);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-dispose\n  proto.dispose = function dispose (method) {\n    return this.out(\"-dispose\", method);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-dissolve\n  proto.dissolve = function dissolve (percent) {\n    return this.out(\"-dissolve\", percent+'%');\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-encoding\n  proto.encoding = function encoding (type) {\n    return this.out(\"-encoding\", type);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-endian\n  proto.endian = function endian (type) {\n    return this.out(\"-endian\", type);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-file\n  proto.file = function file (filename) {\n    return this.out(\"-file\", filename);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-flatten\n  proto.flatten = function flatten () {\n    return this.out(\"-flatten\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-foreground\n  proto.foreground = function foreground (color) {\n    return this.out(\"-foreground\", color);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-frame\n  proto.frame = function frame (width, height, outerBevelWidth, innerBevelWidth) {\n    if(arguments.length==0) return this.out(\"-frame\");\n    return this.out(\"-frame\", width+'x'+height+'+'+outerBevelWidth+'+'+innerBevelWidth);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-fuzz\n  proto.fuzz = function fuzz (distance, percent) {\n    return this.out(\"-fuzz\", distance+(percent?'%':''));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-gaussian\n  proto.gaussian = function gaussian (radius, sigma) {\n    return this.out(\"-gaussian\", argsToArray(radius, sigma).join('x'));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-geometry\n  proto.geometry = function geometry (width, height, arg) {\n    // If the first argument is a string, and there is only one argument, this is a custom geometry command.\n    if(arguments.length == 1 && typeof arguments[0] === \"string\")\n      return this.out(\"-geometry\", arguments[0]);\n\n    // Otherwise, return a resizing geometry command with an option alrgument.\n    return this.out(\"-geometry\", width+'x'+height+(arg||''));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-green-primary\n  proto.greenPrimary = function greenPrimary (x, y) {\n    return this.out(\"-green-primary\", x+','+y);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-highlight-color\n  proto.highlightColor = function highlightColor (color) {\n    return this.out(\"-highlight-color\", color);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-highlight-style\n  proto.highlightStyle = function highlightStyle (style) {\n    return this.out(\"-highlight-style\", style);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-iconGeometry\n  proto.iconGeometry = function iconGeometry (geometry) {\n    return this.out(\"-iconGeometry\", geometry);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-intent\n  proto.intent = function intent (type) {\n    return this.out(\"-intent\", type);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-lat\n  proto.lat = function lat (width, height, offset, percent) {\n    return this.out(\"-lat\", width+'x'+height+offset+(percent?'%':''));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-level\n  proto.level = function level (blackPoint, gamma, whitePoint, percent) {\n    return this.out(\"-level\", argsToArray(blackPoint, gamma, whitePoint).join(',')+(percent?'%':''));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-list\n  proto.list = function list (type) {\n    return this.out(\"-list\", type);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-log\n  proto.log = function log (string) {\n    return this.out(\"-log\", string);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-loop\n  proto.loop = function loop (iterations) {\n    return this.out(\"-loop\", iterations);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-map\n  proto.map = function map (filename) {\n    return this.out(\"-map\", filename);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-mask\n  proto.mask = function mask (filename) {\n    return this.out(\"-mask\", filename);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-matte\n  proto.matte = function matte () {\n    return this.out(\"-matte\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-mattecolor\n  proto.matteColor = function matteColor (color) {\n    return this.out(\"-mattecolor\", color);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-maximum-error\n  proto.maximumError = function maximumError (limit) {\n    return this.out(\"-maximum-error\", limit);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-mode\n  proto.mode = function mode (value) {\n    return this.out(\"-mode\", value);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-monitor\n  proto.monitor = function monitor () {\n    return this.out(\"-monitor\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-mosaic\n  proto.mosaic = function mosaic () {\n    return this.out(\"-mosaic\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-motion-blur\n  proto.motionBlur = function motionBlur (radius, sigma, angle) {\n    var arg=radius;\n    if (typeof sigma!='undefined') arg+='x'+sigma;\n    if (typeof angle!='undefined') arg+='+'+angle;\n    return this.out(\"-motion-blur\", arg);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-name\n  proto.name = function name () {\n    return this.out(\"-name\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-noop\n  proto.noop = function noop () {\n    return this.out(\"-noop\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-normalize\n  proto.normalize = function normalize () {\n    return this.out(\"-normalize\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-opaque\n  proto.opaque = function opaque (color) {\n    return this.out(\"-opaque\", color);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-operator\n  proto.operator = function operator (channel, operator, rvalue, percent) {\n    return this.out(\"-operator\", channel, operator, rvalue+(percent?'%':''));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-ordered-dither\n  proto.orderedDither = function orderedDither (channeltype, NxN) {\n    return this.out(\"-ordered-dither\", channeltype, NxN);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-output-directory\n  proto.outputDirectory = function outputDirectory (directory) {\n    return this.out(\"-output-directory\", directory);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-page\n  proto.page = function page (width, height, arg) {\n    return this.out(\"-page\", width+'x'+height+(arg||''));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-pause\n  proto.pause = function pause (seconds) {\n    return this.out(\"-pause\", seconds);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-pen\n  proto.pen = function pen (color) {\n    return this.out(\"-pen\", color);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-ping\n  proto.ping = function ping () {\n    return this.out(\"-ping\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-pointsize\n  proto.pointSize = function pointSize (value) {\n    return this.out(\"-pointsize\", value);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-preview\n  proto.preview = function preview (type) {\n    return this.out(\"-preview\", type);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-process\n  proto.process = function process (command) {\n    return this.out(\"-process\", command);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-profile\n  proto.profile = function profile (filename) {\n    return this.out(\"-profile\", filename);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-progress\n  proto.progress = function progress () {\n    return this.out(\"+progress\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-random-threshold\n  proto.randomThreshold = function randomThreshold (channeltype, LOWxHIGH) {\n    return this.out(\"-random-threshold\", channeltype, LOWxHIGH);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-recolor\n  proto.recolor = function recolor (matrix) {\n    return this.out(\"-recolor\", matrix);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-red-primary\n  proto.redPrimary = function redPrimary (x, y) {\n    return this.out(\"-red-primary\", x, y);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-remote\n  proto.remote = function remote () {\n    return this.out(\"-remote\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-render\n  proto.render = function render () {\n    return this.out(\"-render\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-repage\n  proto.repage = function repage (width, height, xoff, yoff, arg) {\n    if (arguments[0] === \"+\") return this.out(\"+repage\");\n    return this.out(\"-repage\", width+'x'+height+'+'+xoff+'+'+yoff+(arg||''));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-sample\n  proto.sample = function sample (geometry) {\n    return this.out(\"-sample\", geometry);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-sampling-factor\n  proto.samplingFactor = function samplingFactor (horizontalFactor, verticalFactor) {\n    return this.out(\"-sampling-factor\", horizontalFactor+'x'+verticalFactor);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-scene\n  proto.scene = function scene (value) {\n    return this.out(\"-scene\", value);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-scenes\n  proto.scenes = function scenes (start, end) {\n    return this.out(\"-scenes\", start+'-'+end);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-screen\n  proto.screen = function screen () {\n    return this.out(\"-screen\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-set\n  proto.set = function set (attribute, value) {\n    return this.out(\"-set\", attribute, value);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-segment\n  proto.segment = function segment (clusterThreshold, smoothingThreshold) {\n    return this.out(\"-segment\", clusterThreshold+'x'+smoothingThreshold);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-shade\n  proto.shade = function shade (azimuth, elevation) {\n    return this.out(\"-shade\", azimuth+'x'+elevation);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-shadow\n  proto.shadow = function shadow (radius, sigma) {\n    return this.out(\"-shadow\", argsToArray(radius, sigma).join('x'));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-shared-memory\n  proto.sharedMemory = function sharedMemory () {\n    return this.out(\"-shared-memory\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-shave\n  proto.shave = function shave (width, height, percent) {\n    return this.out(\"-shave\", width+'x'+height+(percent?'%':''));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-shear\n  proto.shear = function shear (xDegrees, yDegreees) {\n    return this.out(\"-shear\", xDegrees+'x'+yDegreees);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-silent\n  proto.silent = function silent (color) {\n    return this.out(\"-silent\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-size\n  proto.rawSize = function rawSize (width, height, offset) {\n    var off = 'undefined' != typeof offset\n      ? '+' + offset\n      : '';\n    return this.out(\"-size\", width +'x'+ height + off);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-snaps\n  proto.snaps = function snaps (value) {\n    return this.out(\"-snaps\", value);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-stegano\n  proto.stegano = function stegano (offset) {\n    return this.out(\"-stegano\", offset);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-stereo\n  proto.stereo = function stereo () {\n    return this.out(\"-stereo\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-text-font\n  proto.textFont = function textFont (name) {\n    return this.out(\"-text-font\", name);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-texture\n  proto.texture = function texture (filename) {\n    return this.out(\"-texture\", filename);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-threshold\n  proto.threshold = function threshold (value, percent) {\n    return this.out(\"-threshold\", value+(percent?'%':''));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-thumbnail\n  proto.thumbnail = function thumbnail (w, h, options) {\n    options = options || \"\";\n    var geometry,\n      wIsValid = Boolean(w || w === 0),\n      hIsValid = Boolean(h || h === 0);\n\n    if (wIsValid && hIsValid) {\n      geometry = w + \"x\" + h + options\n    } else if (wIsValid) {\n      // GraphicsMagick requires <width>x<options>, ImageMagick requires <width><options>\n      geometry = (this._options.imageMagick) ? w + options : w +\n        'x' + options;\n    } else if (hIsValid) {\n      geometry = 'x' + h + options\n    } else {\n      return this\n    }\n\n    return this.out(\"-thumbnail\", geometry);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-tile\n  proto.tile = function tile (filename) {\n    return this.out(\"-tile\", filename);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-title\n  proto.title = function title (string) {\n    return this.out(\"-title\", string);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-transform\n  proto.transform = function transform (color) {\n    return this.out(\"-transform\", color);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-transparent\n  proto.transparent = function transparent (color) {\n    return this.out(\"-transparent\", color);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-treedepth\n  proto.treeDepth = function treeDepth (value) {\n    return this.out(\"-treedepth\", value);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-update\n  proto.update = function update (seconds) {\n    return this.out(\"-update\", seconds);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-units\n  proto.units = function units (type) {\n    return this.out(\"-units\", type);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-unsharp\n  proto.unsharp = function unsharp (radius, sigma, amount, threshold) {\n    var arg=radius;\n    if (typeof sigma != 'undefined') arg+='x'+sigma;\n    if (typeof amount != 'undefined') arg+='+'+amount;\n    if (typeof threshold != 'undefined') arg+='+'+threshold;\n    return this.out(\"-unsharp\", arg);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-use-pixmap\n  proto.usePixmap = function usePixmap () {\n    return this.out(\"-use-pixmap\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-view\n  proto.view = function view (string) {\n    return this.out(\"-view\", string);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-virtual-pixel\n  proto.virtualPixel = function virtualPixel (method) {\n    return this.out(\"-virtual-pixel\", method);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-visual\n  proto.visual = function visual (type) {\n    return this.out(\"-visual\", type);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-watermark\n  proto.watermark = function watermark (brightness, saturation) {\n    return this.out(\"-watermark\", brightness+'x'+saturation);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-wave\n  proto.wave = function wave (amplitude, wavelength) {\n    return this.out(\"-wave\", amplitude+'x'+wavelength);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-white-point\n  proto.whitePoint = function whitePoint (x, y) {\n    return this.out(\"-white-point\", x+'x'+y);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-white-threshold\n  proto.whiteThreshold = function whiteThreshold (red, green, blue, opacity) {\n    return this.out(\"-white-threshold\", argsToArray(red, green, blue, opacity).join(','));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-window\n  proto.window = function window (id) {\n    return this.out(\"-window\", id);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-window-group\n  proto.windowGroup = function windowGroup () {\n    return this.out(\"-window-group\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-strip (graphicsMagick >= 1.3.15)\n  proto.strip = function strip () {\n    if (this._options.imageMagick) return this.out(\"-strip\");\n    return this.noProfile().out(\"+comment\");//Equivalent to \"-strip\" for all versions of graphicsMagick\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-interlace\n  proto.interlace = function interlace (type) {\n    return this.out(\"-interlace\", type || \"None\");\n  }\n\n  // force output format\n  proto.setFormat = function setFormat (format) {\n    if (format) this._outputFormat = format;\n    return this;\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-resize\n  proto.resize = function resize (w, h, options) {\n    options = options || \"\";\n    var geometry,\n      wIsValid = Boolean(w || w === 0),\n      hIsValid = Boolean(h || h === 0);\n\n    if (wIsValid && hIsValid) {\n      geometry = w + \"x\" + h + options\n    } else if (wIsValid) {\n      // GraphicsMagick requires <width>x<options>, ImageMagick requires <width><options>\n      geometry = (this._options.imageMagick) ? w + options : w +\n        'x' + options;\n    } else if (hIsValid) {\n      geometry = 'x' + h + options\n    } else {\n      return this\n    }\n\n    return this.out(\"-resize\", geometry);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-resize with '!' option\n  proto.resizeExact = function resize (w, h) {\n    var options = \"!\";\n    return proto.resize.apply(this, [w, h, options]);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-scale\n  proto.scale = function scale (w, h, options) {\n    options = options || \"\";\n    var geometry;\n    if (w && h) {\n      geometry = w + \"x\" + h + options\n    } else if (w && !h) {\n      geometry = (this._options.imageMagick) ? w + options : w + 'x' + options;\n    } else if (!w && h) {\n      geometry = 'x' + h + options\n    }\n\n    return this.out(\"-scale\", geometry);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-filter\n  proto.filter = function filter (val) {\n    return this.out(\"-filter\", val);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-density\n  proto.density = function density (w, h) {\n    if (w && !h && this._options.imageMagick) {\n      // GraphicsMagick requires <width>x<height>y, ImageMagick may take dpi<resolution>\n      // recommended 300dpi for higher quality\n      return this.in(\"-density\", w);\n    }\n    return this.in(\"-density\", w +\"x\"+ h);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-profile\n  proto.noProfile = function noProfile () {\n    this.out('+profile', '\"*\"');\n    return this;\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-resample\n  proto.resample = function resample (w, h) {\n    return this.out(\"-resample\", w+\"x\"+h);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-rotate\n  proto.rotate = function rotate (color, deg) {\n    return this.out(\"-background\", color, \"-rotate\", String(deg || 0));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-flip\n  proto.flip = function flip () {\n    return this.out(\"-flip\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-flop\n  proto.flop = function flop () {\n    return this.out(\"-flop\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-crop\n  proto.crop = function crop (w, h, x, y, percent) {\n    if (this.inputIs('jpg')) {\n      // avoid error \"geometry does not contain image (unable to crop image)\" - gh-17\n      var index = this._in.indexOf('-size');\n      if (~index) {\n        this._in.splice(index, 2);\n      }\n    }\n\n    return this.out(\"-crop\", w + \"x\" + h + \"+\" + (x || 0) + \"+\" + (y || 0) + (percent ? '%' : ''));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-magnify\n  proto.magnify = function magnify (factor) {\n    return this.in(\"-magnify\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html\n  proto.minify = function minify () {\n    return this.in(\"-minify\")\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-quality\n  proto.quality = function quality (val) {\n    return this.in(\"-quality\", val || 75);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-blur\n  proto.blur = function blur (radius, sigma) {\n    return this.out(\"-blur\", radius + (sigma ? \"x\"+sigma : \"\"));\n  }\n\n  // http://www.graphicsmagick.org/convert.html\n  proto.charcoal = function charcoal (factor) {\n    return this.out(\"-charcoal\", factor || 2);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-modulate\n  proto.modulate = function modulate (b, s, h) {\n    return this.out(\"-modulate\", [b,s,h].join(\",\"));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-antialias\n  // note: antialiasing is enabled by default\n  proto.antialias = function antialias (disable) {\n    return false === disable\n      ? this.out(\"+antialias\")\n      : this;\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-depth\n  proto.bitdepth = function bitdepth (val) {\n    return this.out(\"-depth\", val);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-colors\n  proto.colors = function colors (val) {\n    return this.out(\"-colors\", val || 128);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-colorspace\n  proto.colorspace = function colorspace (val) {\n    return this.out(\"-colorspace\", val);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-comment\n  proto.comment = comment(\"-comment\");\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-contrast\n  proto.contrast = function contrast (mult) {\n    var arg = (parseInt(mult, 10) || 0) > 0\n      ? \"+contrast\"\n      : \"-contrast\";\n\n    mult = Math.abs(mult) || 1;\n\n    while (mult--) {\n      this.out(arg);\n    }\n\n    return this;\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-cycle\n  proto.cycle = function cycle (amount) {\n    return this.out(\"-cycle\", amount || 2);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html\n  proto.despeckle = function despeckle () {\n    return this.out(\"-despeckle\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-dither\n  // note: either colors() or monochrome() must be used for this\n  // to take effect.\n  proto.dither = function dither (on) {\n    var sign = false === on\n      ? \"+\"\n      : \"-\";\n\n    return this.out(sign + \"dither\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html\n  proto.monochrome = function monochrome () {\n    return this.out(\"-monochrome\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html\n  proto.edge = function edge (radius) {\n    return this.out(\"-edge\", radius || 1);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html\n  proto.emboss = function emboss (radius) {\n    return this.out(\"-emboss\", radius || 1);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html\n  proto.enhance = function enhance () {\n    return this.out(\"-enhance\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html\n  proto.equalize = function equalize () {\n    return this.out(\"-equalize\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-gamma\n  proto.gamma = function gamma (r, g, b) {\n    return this.out(\"-gamma\", [r,g,b].join());\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html\n  proto.implode = function implode (factor) {\n    return this.out(\"-implode\", factor || 1);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-comment\n  proto.label = comment(\"-label\");\n\n  var limits = [ \"disk\", \"file\", \"map\", \"memory\", \"pixels\", \"threads\"];\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-limit\n  proto.limit = function limit (type, val) {\n    type = type.toLowerCase();\n\n    if (!~limits.indexOf(type)) {\n      return this;\n    }\n\n    return this.out(\"-limit\", type, val);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html\n  proto.median = function median (radius) {\n    return this.out(\"-median\", radius || 1);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-negate\n  proto.negative = function negative (grayscale) {\n    var sign = grayscale ? \"+\" : \"-\";\n    return this.out(sign + \"negate\");\n  }\n\n  var noises = [\n      \"uniform\"\n    , \"gaussian\"\n    , \"multiplicative\"\n    , \"impulse\"\n    , \"laplacian\"\n    , \"poisson\"\n  ];\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-noise\n  proto.noise = function noise (radius) {\n    radius = (String(radius)).toLowerCase();\n\n    var sign = ~noises.indexOf(radius)\n      ? \"+\"\n      : \"-\";\n\n    return this.out(sign + \"noise\", radius);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-paint\n  proto.paint = function paint (radius) {\n    return this.out(\"-paint\", radius);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-raise\n  proto.raise = function raise (w, h) {\n    return this.out(\"-raise\", (w||0)+\"x\"+(h||0));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-raise\n  proto.lower = function lower (w, h) {\n    return this.out(\"+raise\", (w||0)+\"x\"+(h||0));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-region\n  proto.region = function region (w, h, x, y) {\n    w = w || 0;\n    h = h || 0;\n    x = x || 0;\n    y = y || 0;\n    return this.out(\"-region\", w + \"x\" + h + \"+\" + x + \"+\" + y);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-roll\n  proto.roll = function roll (x, y) {\n    x = ((x = parseInt(x, 10) || 0) >= 0 ? \"+\" : \"\") + x;\n    y = ((y = parseInt(y, 10) || 0) >= 0 ? \"+\" : \"\") + y;\n    return this.out(\"-roll\", x+y);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-sharpen\n  proto.sharpen = function sharpen (radius, sigma) {\n    sigma = sigma\n      ? \"x\" + sigma\n      : \"\";\n\n    return this.out(\"-sharpen\", radius + sigma);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-solarize\n  proto.solarize = function solarize (factor) {\n    return this.out(\"-solarize\", (factor || 1)+\"%\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-spread\n  proto.spread = function spread (amount) {\n    return this.out(\"-spread\", amount || 5);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-swirl\n  proto.swirl = function swirl (degrees) {\n    return this.out(\"-swirl\", degrees || 180);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-type\n  proto.type = function type (type) {\n    return this.in(\"-type\", type);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-trim\n  proto.trim = function trim () {\n    return this.out(\"-trim\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-extent\n  proto.extent = function extent (w, h, options) {\n    options = options || \"\";\n    var geometry;\n    if (w && h) {\n      geometry = w + \"x\" + h + options\n    } else if (w && !h) {\n      geometry = (this._options.imageMagick) ? w + options : w + 'x' + options;\n    } else if (!w && h) {\n      geometry = 'x' + h + options\n    }\n\n    return this.out(\"-extent\", geometry);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-gravity\n  // Be sure to use gravity BEFORE extent\n  proto.gravity = function gravity (type) {\n    if (!type || !~gravity.types.indexOf(type)) {\n      type = \"NorthWest\"; // Documented default.\n    }\n\n    return this.out(\"-gravity\", type);\n  }\n\n  proto.gravity.types = [\n      \"NorthWest\"\n    , \"North\"\n    , \"NorthEast\"\n    , \"West\"\n    , \"Center\"\n    , \"East\"\n    , \"SouthWest\"\n    , \"South\"\n    , \"SouthEast\"\n  ];\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-flatten\n  proto.flatten = function flatten () {\n    return this.out(\"-flatten\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-background\n  proto.background = function background (color) {\n    return this.in(\"-background\", color);\n  }\n};\n\n/**\n * Generates a handler for comments/labels.\n */\n\nfunction comment (arg) {\n  return function (format) {\n    format = String(format);\n\n    format = \"@\" == format.charAt(0)\n      ? format.substring(1)\n      : format;\n\n    return this.out(arg, '\"' + format + '\"');\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/utils.js":"\n/**\n * Escape the given shell `arg`.\n *\n * @param {String} arg\n * @return {String}\n * @api public\n */\n\nexports.escape = function escape (arg) {\n  return '\"' + String(arg).trim().replace(/\"/g, '\\\\\"') + '\"';\n};\n\nexports.unescape = function escape (arg) {\n    return String(arg).trim().replace(/\"/g, \"\");\n};\n\nexports.argsToArray = function (args) {\n  var arr = [];\n\n  for (var i = 0; i <= arguments.length; i++) {\n    if ('undefined' != typeof arguments[i])\n      arr.push(arguments[i]);\n  }\n\n  return arr;\n};\n\nexports.isUtil = function (v) {\n\tvar ty = 'object';\n\tswitch (Object.prototype.toString.call(v)) {\n\tcase '[object String]':\n\t\tty = 'String';\n\t\tbreak;\n\tcase '[object Array]':\n\t\tty = 'Array';\n\t\tbreak;\n\tcase '[object Boolean]':\n\t\tty = 'Boolean';\n\t\tbreak;\n\t}\n\treturn ty;\n}","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/drawing.js":"\n/**\n * Module dependencies.\n */\n\nvar escape = require('./utils').escape;\n\n/**\n * Extend proto.\n */\n\nmodule.exports = function (proto) {\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-fill\n  proto.fill = function fill (color) {\n    return this.out(\"-fill\", color || \"none\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-stroke\n  proto.stroke = function stroke (color, width) {\n    if (width) {\n      this.strokeWidth(width);\n    }\n\n    return this.out(\"-stroke\", color || \"none\");\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-strokewidth\n  proto.strokeWidth = function strokeWidth (width) {\n    return this.out(\"-strokewidth\", width);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-font\n  proto.font = function font (font, size) {\n    if (size) {\n      this.fontSize(size);\n    }\n\n    return this.out(\"-font\", font);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html\n  proto.fontSize = function fontSize (size) {\n    return this.out(\"-pointsize\", size);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-draw\n  proto.draw = function draw (args) {\n    return this.out(\"-draw\", [].slice.call(arguments).join(\" \"));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-draw\n  proto.drawPoint = function drawPoint (x, y) {\n    return this.draw(\"point\", x +\",\"+ y);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-draw\n  proto.drawLine = function drawLine (x0, y0, x1, y1) {\n    return this.draw(\"line\", x0+\",\"+y0, x1+\",\"+y1);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-draw\n  proto.drawRectangle = function drawRectangle (x0, y0, x1, y1, wc, hc) {\n    var shape = \"rectangle\"\n      , lastarg;\n\n    if (\"undefined\" !== typeof wc) {\n      shape = \"roundRectangle\";\n\n      if (\"undefined\" === typeof hc) {\n        hc = wc;\n      }\n\n      lastarg = wc+\",\"+hc;\n    }\n\n    return this.draw(shape, x0+\",\"+y0, x1+\",\"+y1, lastarg);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-draw\n  proto.drawArc = function drawArc (x0, y0, x1, y1, a0, a1) {\n    return this.draw(\"arc\", x0+\",\"+y0, x1+\",\"+y1, a0+\",\"+a1);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-draw\n  proto.drawEllipse = function drawEllipse (x0, y0, rx, ry, a0, a1) {\n    if (a0 == undefined) a0 = 0;\n    if (a1 == undefined) a1 = 360;\n    return this.draw(\"ellipse\", x0+\",\"+y0, rx+\",\"+ry, a0+\",\"+a1);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-draw\n  proto.drawCircle = function drawCircle (x0, y0, x1, y1) {\n    return this.draw(\"circle\", x0+\",\"+y0, x1+\",\"+y1);\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-draw\n  proto.drawPolyline = function drawPolyline () {\n    return this.draw(\"polyline\", formatPoints(arguments));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-draw\n  proto.drawPolygon = function drawPolygon () {\n    return this.draw(\"polygon\", formatPoints(arguments));\n  }\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-draw\n  proto.drawBezier = function drawBezier () {\n    return this.draw(\"bezier\", formatPoints(arguments));\n  }\n\n  proto._gravities = [\n      \"northwest\"\n\t  , \"north\"\n    , \"northeast\"\n\t  , \"west\"\n    , \"center\"\n\t  , \"east\"\n    , \"southwest\"\n    , \"south\"\n    , \"southeast\"];\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-draw\n  proto.drawText = function drawText (x0, y0, text, gravity) {\n    var gravity = String(gravity || \"\").toLowerCase()\n      , arg = [\"text \" + x0 + \",\" + y0 + \" \" + escape(text)];\n\n    if (~this._gravities.indexOf(gravity)) {\n      arg.unshift(\"gravity\", gravity);\n    }\n\n    return this.draw.apply(this, arg);\n  }\n\n  proto._drawProps = [\"color\", \"matte\"];\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-draw\n  proto.setDraw = function setDraw (prop, x, y, method) {\n    prop = String(prop || \"\").toLowerCase();\n\n    if (!~this._drawProps.indexOf(prop)) {\n      return this;\n    }\n\n    return this.draw(prop, x+\",\"+y, method);\n  }\n\n}\n\nfunction formatPoints (points) {\n  var len = points.length\n    , result = []\n    , i = 0;\n\n  for (; i < len; ++i) {\n    result.push(points[i].join(\",\"));\n  }\n\n  return result;\n}\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/convenience.js":"\n/**\n * Extend proto\n */\n\nmodule.exports = function (proto) {\n  require(\"./convenience/thumb\")(proto);\n  require(\"./convenience/morph\")(proto);\n  require(\"./convenience/sepia\")(proto);\n  require(\"./convenience/autoOrient\")(proto);\n}\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/convenience/thumb.js":"\n/**\n * Extend proto.\n */\n\nmodule.exports = function (proto) {\n\n  proto.thumb = function thumb (w, h, name, quality, align, progressive, callback, opts) {\n    var self = this,\n      args = Array.prototype.slice.call(arguments);\n\n    opts = args.pop();\n\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = '';\n    } else {\n      callback = args.pop();\n    }\n\n    w = args.shift();\n    h = args.shift();\n    name = args.shift();\n    quality = args.shift() || 63;\n    align = args.shift() || 'topleft';\n    var interlace = args.shift() ? 'Line' : 'None';\n\n    self.size(function (err, size) {\n      if (err) {\n        return callback.apply(self, arguments);\n      }\n\n      w = parseInt(w, 10);\n      h = parseInt(h, 10);\n\n      var w1, h1;\n      var xoffset = 0;\n      var yoffset = 0;\n\n      if (size.width < size.height) {\n        w1 = w;\n        h1 = Math.floor(size.height * (w/size.width));\n        if (h1 < h) {\n          w1 = Math.floor(w1 * (((h-h1)/h) + 1));\n          h1 = h;\n        }\n      } else if (size.width > size.height) {\n        h1 = h;\n        w1 = Math.floor(size.width * (h/size.height));\n        if (w1 < w) {\n          h1 = Math.floor(h1 * (((w-w1)/w) + 1));\n          w1 = w;\n        }\n      } else if (size.width == size.height) {\n        var bigger = (w>h?w:h);\n        w1 = bigger;\n        h1 = bigger;\n      }\n\n      if (align == 'center') {\n        if (w < w1) {\n          xoffset = (w1-w)/2;\n        }\n        if (h < h1) {\n          yoffset = (h1-h)/2;\n        }\n      }\n\n      self\n      .quality(quality)\n      .in(\"-size\", w1+\"x\"+h1)\n      .scale(w1, h1, opts)\n      .crop(w, h, xoffset, yoffset)\n      .interlace(interlace)\n      .noProfile()\n      .write(name, function () {\n        callback.apply(self, arguments);\n      });\n    });\n\n    return self;\n  };\n\n  proto.thumbExact = function () {\n    var self = this,\n      args = Array.prototype.slice.call(arguments);\n\n    args.push('!');\n\n    self.thumb.apply(self, args);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/convenience/morph.js":"\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\nvar parallel = require('array-parallel');\n\n/**\n * Extend proto.\n */\n\nmodule.exports = function (proto) {\n\n  /**\n   * Do nothing.\n   */\n\n  function noop () {}\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-morph\n  proto.morph = function morph (other, outname, callback) {\n    if (!outname) {\n      throw new Error(\"an output filename is required\");\n    }\n\n    callback = (callback || noop).bind(this)\n\n    var self = this;\n\n    if (Array.isArray(other)) {\n      other.forEach(function (img) {\n        self.out(img);\n      });\n      self.out(\"-morph\", other.length);\n    } else {\n      self.out(other, \"-morph\", 1);\n    }\n\n    self.write(outname, function (err, stdout, stderr, cmd) {\n      if (err) return callback(err, stdout, stderr, cmd);\n\n      // Apparently some platforms create the following temporary files.\n      // Check if the output file exists, if it doesn't, then\n      // work with temporary files.\n      fs.exists(outname, function (exists) {\n        if (exists) return callback(null, stdout, stderr, cmd);\n\n        parallel([\n          fs.unlink.bind(fs, outname + '.0'),\n          fs.unlink.bind(fs, outname + '.2'),\n          fs.rename.bind(fs, outname + '.1', outname)\n        ], function (err) {\n          callback(err, stdout, stderr, cmd);\n        })\n      })\n    });\n\n    return self;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/convenience/sepia.js":"\n/**\n * Extend proto.\n */\n\nmodule.exports = function (proto) {\n  proto.sepia = function sepia () {\n    return this.modulate(115, 0, 100).colorize(7, 21, 50);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/convenience/autoOrient.js":"\n/**\n * Extend proto.\n */\n\nmodule.exports = function (proto) {\n\n  var exifTransforms = {\n      topleft:     ''\n    , topright:    ['-flop']\n    , bottomright: ['-rotate', 180]\n    , bottomleft:  ['-flip']\n    , lefttop:     ['-flip', '-rotate', 90]\n    , righttop:    ['-rotate', 90]\n    , rightbottom: ['-flop', '-rotate', 90]\n    , leftbottom:  ['-rotate', 270]\n  }\n\n  proto.autoOrient = function autoOrient () {\n    // Always strip EXIF data since we can't\n    // change/edit it.\n\n    // imagemagick has a native -auto-orient option\n    // so does graphicsmagick, but in 1.3.18.\n    // nativeAutoOrient option enables this if you know you have >= 1.3.18\n    if (this._options.nativeAutoOrient || this._options.imageMagick) {\n      this.out('-auto-orient');\n      this.strip();\n      return this;\n    }\n\n    this.preprocessor(function (callback) {\n      this.orientation({bufferStream: true}, function (err, orientation) {\n        if (err) return callback(err);\n\n        var transforms = exifTransforms[orientation.toLowerCase()];\n        if (transforms) {\n\n          // remove any existing transforms that might conflict\n          var index = this._out.indexOf(transforms[0]);\n          if (~index) {\n            this._out.splice(index, transforms.length);\n          }\n\n          // repage to fix coordinates\n          this._out.unshift.apply(this._out, transforms.concat('-page', '+0+0'));\n        }\n\n        this.strip();\n\n        callback();\n      });\n    });\n\n    return this;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/command.js":"\n/**\n * Module dependencies.\n */\n\nvar spawn = require('cross-spawn');\nvar utils = require('./utils');\nvar debug = require('debug')('gm');\nvar series = require('array-series');\nvar PassThrough = require('stream').PassThrough;\n\n/**\n * Error messaging.\n */\n\nvar noBufferConcat = 'gm v1.9.0+ required node v0.8+. Please update your version of node, downgrade gm < 1.9, or do not use `bufferStream`.';\n\n/**\n * Extend proto\n */\n\nmodule.exports = function (proto) {\n\n  function args (prop) {\n    return function args () {\n      var len = arguments.length;\n      var a = [];\n      var i = 0;\n\n      for (; i < len; ++i) {\n        a.push(arguments[i]);\n      }\n\n      this[prop] = this[prop].concat(a);\n      return this;\n    }\n  }\n  \n  function streamToUnemptyBuffer(stream, callback) {\n    var done = false\n    var buffers = []\n\n    stream.on('data', function (data) {\n      buffers.push(data)\n    })\n\n    stream.on('end', function () {\n      var result, err;\n      if (done)\n        return\n\n      done = true\n      result = Buffer.concat(buffers)\n      buffers = null\n      if (result.length==0)\n      {\n          err = new Error(\"Stream yields empty buffer\"); \n          callback(err, null);\n      } else {\n          callback(null, result);\n      }\n    })\n\n    stream.on('error', function (err) {\n      done = true\n      buffers = null\n      callback(err)\n    })\n  }\n\n  proto.in = args('_in');\n  proto.out = args('_out');\n\n  proto._preprocessor = [];\n  proto.preprocessor = args('_preprocessor');\n\n  /**\n   * Execute the command and write the image to the specified file name.\n   *\n   * @param {String} name\n   * @param {Function} callback\n   * @return {Object} gm\n   */\n\n  proto.write = function write (name, callback) {\n    if (!callback) callback = name, name = null;\n\n    if (\"function\" !== typeof callback) {\n      throw new TypeError(\"gm().write() expects a callback function\")\n    }\n\n    if (!name) {\n      return callback(TypeError(\"gm().write() expects a filename when writing new files\"));\n    }\n\n    this.outname = name;\n\n    var self = this;\n    this._preprocess(function (err) {\n      if (err) return callback(err);\n      self._spawn(self.args(), true, callback);\n    });\n  }\n\n  /**\n   * Execute the command and return stdin and stderr\n   * ReadableStreams providing the image data.\n   * If no callback is passed, a \"through\" stream will be returned,\n   * and stdout will be piped through, otherwise the error will be passed.\n   *\n   * @param {String} format (optional)\n   * @param {Function} callback (optional)\n   * @return {Stream}\n   */\n\n  proto.stream = function stream (format, callback) {\n    if (!callback && typeof format === 'function') {\n      callback = format;\n      format = null;\n    }\n\n    var throughStream;\n\n    if (\"function\" !== typeof callback) {\n      throughStream = new PassThrough();\n      callback = function (err, stdout, stderr) {\n        if (err) throughStream.emit('error', err);\n        else stdout.pipe(throughStream);\n      }\n    }\n\n    if (format) {\n      format = format.split('.').pop();\n      this.outname = format + \":-\";\n    }\n\n    var self = this;\n    this._preprocess(function (err) {\n      if (err) return callback(err);\n      return self._spawn(self.args(), false, callback);\n    });\n\n    return throughStream || this;\n  }\n\n  /**\n   * Convenience function for `proto.stream`.\n   * Simply returns the buffer instead of the stream.\n   *\n   * @param {String} format (optional)\n   * @param {Function} callback\n   * @return {null}\n   */\n\n  proto.toBuffer = function toBuffer (format, callback) {\n    if (!callback) callback = format, format = null;\n\n    if (\"function\" !== typeof callback) {\n      throw new Error('gm().toBuffer() expects a callback.');\n    }\n\n    return this.stream(format, function (err, stdout) {\n      if (err) return callback(err);\n\n      streamToUnemptyBuffer(stdout, callback);\n    })\n  }\n\n  /**\n    * Run any preProcessor functions in series. Used by autoOrient.\n    *\n    * @param {Function} callback\n    * @return {Object} gm\n    */\n\n  proto._preprocess = function _preprocess (callback) {\n    series(this._preprocessor, this, callback);\n  }\n\n  /**\n    * Execute the command, buffer input and output, return stdout and stderr buffers.\n    *\n    * @param {String} bin\n    * @param {Array} args\n    * @param {Function} callback\n    * @return {Object} gm\n    */\n\n  proto._exec = function _exec (args, callback) {\n    return this._spawn(args, true, callback);\n  }\n\n  /**\n    * Execute the command with stdin, returning stdout and stderr streams or buffers.\n    * @param {String} bin\n    * @param {Array} args\n    * @param {ReadableStream} stream\n    * @param {Boolean} shouldBuffer\n    * @param {Function} callback, signature (err, stdout, stderr) -> * \n    * @return {Object} gm\n    * @TODO refactor this mess\n    */\n\n  proto._spawn = function _spawn (args, bufferOutput, callback) {\n    var appPath = this._options.appPath || '';\n    var bin = this._options.imageMagick\n      ? appPath + args.shift()\n      : appPath + 'gm'\n\n    var cmd = bin + ' ' + args.map(utils.escape).join(' ')\n      , self = this\n      , proc, err\n      , timeout = parseInt(this._options.timeout)\n      , disposers = this._options.disposers\n      , timeoutId;\n\n    debug(cmd);\n    //imageMagick does not support minify (https://github.com/aheckmann/gm/issues/385)\n    if(args.indexOf(\"-minify\") > -1 && this._options.imageMagick){\n      err = new Error(\"imageMagick does not support minify, use -scale or -sample. Alternatively, use graphicsMagick\");\n      return cb(err);\n    }\n    try {\n      proc = spawn(bin, args);\n    } catch (e) {\n      return cb(e);\n    }\n    proc.stdin.once('error', cb);\n    \n    proc.on('error', function(err){\n      if (err.code === 'ENOENT') {\n        cb(new Error('Could not execute GraphicsMagick/ImageMagick: '+cmd+\" this most likely means the gm/convert binaries can't be found\"));\n      } else {\n        cb(err);\n      }\n    });\n\n    if (timeout) {\n      timeoutId = setTimeout(function(){\n        dispose('gm() resulted in a timeout.');\n      }, timeout);\n    }\n\n    if (disposers) {\n      disposers.forEach(function(disposer) {\n        disposer.events.forEach(function(event) {\n          disposer.emitter.on(event, dispose);\n        });\n      });\n    }\n\n    if (self.sourceBuffer) {\n      proc.stdin.write(this.sourceBuffer);\n      proc.stdin.end();\n    } else if (self.sourceStream) {\n\n      if (!self.sourceStream.readable) {\n        err = new Error(\"gm().stream() or gm().write() with a non-readable stream.\");\n        return cb(err);\n      }\n\n      self.sourceStream.pipe(proc.stdin);\n\n      // bufferStream\n      // We convert the input source from a stream to a buffer.\n      if (self.bufferStream && !this._buffering) {\n        if (!Buffer.concat) {\n          throw new Error(noBufferConcat);\n        }\n\n        // Incase there are multiple processes in parallel,\n        // we only need one\n        self._buffering = true;\n\n        streamToUnemptyBuffer(self.sourceStream, function (err, buffer) {\n          self.sourceBuffer = buffer;\n          self.sourceStream = null; // The stream is now dead\n        })\n      }\n    }\n\n    // for _exec operations (identify() mostly), we also\n    // need to buffer the output stream before returning\n    if (bufferOutput) {\n      var stdout = ''\n        , stderr = ''\n        , onOut\n        , onErr\n        , onExit\n\n      proc.stdout.on('data', onOut = function (data) {\n        stdout += data;\n      });\n\n      proc.stderr.on('data', onErr = function (data) {\n        stderr += data;\n      });\n\n      proc.on('close', onExit = function (code, signal) {\n        if (code !== 0 || signal !== null) {\n          err = new Error('Command failed: ' + stderr);\n          err.code = code;\n          err.signal = signal;\n        };\n        cb(err, stdout, stderr, cmd);\n        stdout = stderr = onOut = onErr = onExit = null;\n      });\n    } else {\n      cb(null, proc.stdout, proc.stderr, cmd);\n    }\n\n    return self;\n\n    function cb (err, stdout, stderr, cmd) {\n      if (cb.called) return;\n      if (timeoutId) clearTimeout(timeoutId);\n      cb.called = 1;\n      if (args[0] !== 'identify' && bin !== 'identify') {\n\tself._in = [];\n\tself._out = [];\n      }\n      callback.call(self, err, stdout, stderr, cmd);\n    }\n\n    function dispose (msg) {\n      var message = msg ? msg : 'gm() was disposed';\n      err = new Error(message);\n      cb(err);\n      if (proc.exitCode === null) {\n        proc.stdin.pause();\n        proc.kill();\n      }\n    }\n  }\n\n  /**\n   * Returns arguments to be used in the command.\n   *\n   * @return {Array}\n   */\n\n  proto.args = function args () {\n    var outname = this.outname || \"-\";\n  \tif (this._outputFormat) outname = this._outputFormat + ':' + outname;\n\n    return [].concat(\n        this._subCommand\n      , this._in\n      , this.src()\n      , this._out\n      , outname\n    ).filter(Boolean); // remove falsey\n  }\n\n  /**\n   * Adds an img source formatter.\n   *\n   * `formatters` are passed an array of images which will be\n   * used as 'input' images for the command. Useful for methods\n   * like `.append()` where multiple source images may be used.\n   *\n   * @param {Function} formatter\n   * @return {gm} this\n   */\n\n  proto.addSrcFormatter = function addSrcFormatter (formatter) {\n    if ('function' != typeof formatter)\n      throw new TypeError('sourceFormatter must be a function');\n    this._sourceFormatters || (this._sourceFormatters = []);\n    this._sourceFormatters.push(formatter);\n    return this;\n  }\n\n  /**\n   * Applies all _sourceFormatters\n   *\n   * @return {Array}\n   */\n\n  proto.src = function src () {\n    var arr = [];\n    for (var i = 0; i < this._sourceFormatters.length; ++i) {\n      this._sourceFormatters[i].call(this, arr);\n    }\n    return arr;\n  }\n\n  /**\n   * Image types.\n   */\n\n  var types = {\n      'jpg': /\\.jpe?g$/i\n    , 'png' : /\\.png$/i\n    , 'gif' : /\\.gif$/i\n    , 'tiff': /\\.tif?f$/i\n    , 'bmp' : /(?:\\.bmp|\\.dib)$/i\n    , 'webp': /\\.webp$/i\n  };\n\n  types.jpeg = types.jpg;\n  types.tif = types.tiff;\n  types.dib = types.bmp;\n\n  /**\n   * Determine the type of source image.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   * @example\n   *   if (this.inputIs('png')) ...\n   */\n\n  proto.inputIs = function inputIs (type) {\n    if (!type) return false;\n\n    var rgx = types[type];\n    if (!rgx) {\n      if ('.' !== type[0]) type = '.' + type;\n      rgx = new RegExp('\\\\' + type + '$', 'i');\n    }\n\n    return rgx.test(this.source);\n  }\n\n  /**\n   * add disposer (like 'close' of http.IncomingMessage) in order to dispose gm() with any event\n   *\n   * @param {EventEmitter} emitter\n   * @param {Array} events\n   * @return {Object} gm\n   * @example\n   *   command.addDisposer(req, ['close', 'end', 'finish']);\n   */\n\n  proto.addDisposer = function addDisposer (emitter, events) {\n    if (!this._options.disposers) {\n      this._options.disposers = [];\n    }\n    this._options.disposers.push({\n      emitter: emitter,\n      events: events\n    });\n    return this;\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/compare.js":"// compare\n\nvar spawn = require('cross-spawn');\n\n/**\n * Compare two images uses graphicsmagicks `compare` command.\n *\n * gm.compare(img1, img2, 0.4, function (err, equal, equality) {\n *   if (err) return handle(err);\n *   console.log('The images are equal: %s', equal);\n *   console.log('There equality was %d', equality);\n * });\n *\n * @param {String} orig Path to an image.\n * @param {String} compareTo Path to another image to compare to `orig`.\n * @param {Number|Object} [options] Options object or the amount of difference to tolerate before failing - defaults to 0.4\n * @param {Function} cb(err, Boolean, equality, rawOutput)\n */\n\nmodule.exports = exports = function (proto) {\n  function compare(orig, compareTo, options, cb) {\n\n    var isImageMagick = this._options && this._options.imageMagick;\n    var appPath = this._options && this._options.appPath || '';\n    var bin = isImageMagick\n      ? appPath + 'compare' \n      : appPath + 'gm'\n    var args = ['-metric', 'mse', orig, compareTo]\n    if (!isImageMagick) {\n        args.unshift('compare');\n    }\n    var tolerance = 0.4;\n    // outputting the diff image\n    if (typeof options === 'object') {\n\n      if (options.highlightColor && options.highlightColor.indexOf('\"') < 0) {\n        options.highlightColor = '\"' + options.highlightColor + '\"';\n      }\n\n      if (options.file) {\n        if (typeof options.file !== 'string') {\n          throw new TypeError('The path for the diff output is invalid');\n        }\n         // graphicsmagick defaults to red\n        if (options.highlightColor) {\n            args.push('-highlight-color');\n            args.push(options.highlightColor);\n        }\n        if (options.highlightStyle) {\n            args.push('-highlight-style')\n            args.push(options.highlightStyle)\n        }\n        // For IM, filename is the last argument. For GM it's `-file <filename>`\n        if (!isImageMagick) {\n            args.push('-file');\n        }\n        args.push(options.file);\n      }\n      \n      if (typeof options.tolerance != 'undefined') {\n        if (typeof options.tolerance !== 'number') {\n          throw new TypeError('The tolerance value should be a number');\n        }\n        tolerance = options.tolerance;\n      } \n    } else {\n      // For ImageMagick diff file is required but we don't care about it, so null it out\n      if (isImageMagick) {\n        args.push('null:');\n      }\n\n      if (typeof options == 'function') {\n        cb = options; // tolerance value not provided, flip the cb place\n      } else {\n        tolerance = options\n      }\n    }\n\n    var proc = spawn(bin, args);\n    var stdout = '';\n    var stderr = '';\n    proc.stdout.on('data',function(data) { stdout+=data });\n    proc.stderr.on('data',function(data) { stderr+=data });\n    proc.on('close', function (code) {\n      // ImageMagick returns err code 2 if err, 0 if similar, 1 if dissimilar\n      if (isImageMagick) {\n        if (code === 0) {\n          return cb(null, 0 <= tolerance, 0, stdout);\n        }\n        else if (code === 1) {\n          err = null;\n          stdout = stderr;\n        } else {\n        return cb(stderr);\n        }\n      } else {\n        if(code !== 0) {\n          return cb(stderr);\n        }\n      }\n      // Since ImageMagick similar gives err code 0 and no stdout, there's really no matching\n      // Otherwise, output format for IM is `12.00 (0.123)` and for GM it's `Total: 0.123`\n      var regex = isImageMagick ? /\\((\\d+\\.?[\\d\\-\\+e]*)\\)/m : /Total: (\\d+\\.?\\d*)/m;\n      var match = regex.exec(stdout);\n      if (!match) {\n        err = new Error('Unable to parse output.\\nGot ' + stdout);\n        return cb(err);\n      }\n\n      var equality = parseFloat(match[1]);\n      cb(null, equality <= tolerance, equality, stdout, orig, compareTo);\n    });\n  }\n\n  if (proto) {\n    proto.compare = compare;\n  }\n  return compare;\n};\n\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/composite.js":"// composite\n\n/**\n * Composite images together using the `composite` command in graphicsmagick.\n *\n * gm('/path/to/image.jpg')\n * .composite('/path/to/second_image.jpg')\n * .geometry('+100+150')\n * .write('/path/to/composite.png', function(err) {\n *   if(!err) console.log(\"Written composite image.\");\n * });\n *\n * @param {String} other  Path to the image that contains the changes.\n * @param {String} [mask] Path to the image with opacity informtion. Grayscale.\n */\n\nmodule.exports = exports = function(proto) {\n    proto.composite = function(other, mask) {\n        this.in(other);\n\n        // If the mask is defined, add it to the output.\n        if(typeof mask !== \"undefined\")\n            this.out(mask);\n\n        this.subCommand(\"composite\");\n\n        return this;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-gm/node_modules/gm/lib/montage.js":"// montage\n\n/**\n * Montage images next to each other using the `montage` command in graphicsmagick.\n *\n * gm('/path/to/image.jpg')\n * .montage('/path/to/second_image.jpg')\n * .geometry('+100+150')\n * .write('/path/to/montage.png', function(err) {\n *   if(!err) console.log(\"Written montage image.\");\n * });\n *\n * @param {String} other  Path to the image that contains the changes.\n */\n\nmodule.exports = exports = function(proto) {\n    proto.montage = function(other) {\n        this.in(other);\n\n        this.subCommand(\"montage\");\n\n        return this;\n    }\n}\n"}